/**
 * @description
 * Defines the TypeScript interface for the Cloudflare Worker environment bindings and secrets
 * for the Authentication Server (`auth-worker`). This ensures type safety when accessing
 * environment variables and bindings within the worker code.
 *
 * @dependencies
 * - @cloudflare/workers-types: Provides core Worker types like KVNamespace.
 *
 * @notes
 * - This interface should mirror the bindings and secrets configured in `wrangler.toml`.
 * - Secrets defined here (like OAUTH_SIGNING_KEY) must be set using `wrangler secret put`.
 */

import type { OAuthHelpers } from '@cloudflare/workers-oauth-provider';
import type { KVNamespace } from '@cloudflare/workers-types';

export interface Env {
	/**
	 * KV Namespace for storing OAuth-related data like authorization codes,
	 * refresh tokens, and temporary session state.
	 * Bound in `wrangler.toml`.
	 */
	OAUTH_KV: KVNamespace;

	// --- Secrets (set via `wrangler secret put`) ---

	/**
	 * The API URL for your Hanko backend service.
	 * Required for interacting with Hanko for passkey operations if needed directly by the worker,
	 * or potentially passed to the client-side components.
	 */
	HANKO_API_URL: string;

	/**
	 * The base URL of the primary client application (Next.js app).
	 * Used for constructing redirect URIs or validating origins.
	 */
	CLIENT_APP_URL: string;

	/**
	 * A secret key (JWK format recommended or a long string) used by the OAuth provider library
	 * to sign JWT Access Tokens. This key MUST be kept secret.
	 * The corresponding public key will be exposed via the JWKS endpoint.
	 */
	OAUTH_SIGNING_KEY: string; // Should be in JWK format or a securely generated secret string

	/**
	 * Optional: Another secret, potentially used for internal session management
	 * or other cryptographic operations within the worker if needed.
	 */
	JWT_SECRET?: string;

	// --- Variables (set in `wrangler.toml` under [vars]) ---

	/**
	 * Optional: The public key corresponding to OAUTH_SIGNING_KEY, provided in JWK format.
	 * If OAUTH_SIGNING_KEY is a symmetric secret (string), this is not applicable.
	 * Used to populate the /.well-known/jwks.json endpoint. Can be derived from the
	 * signing key if using asymmetric crypto and not provided explicitly.
	 */
	OAUTH_PUBLIC_KEY_JWK?: string;

    /**
     * The issuer URL for the JWT tokens generated by this auth server.
     * Should typically be the public URL where this worker is deployed.
     * If not set, the library might default to the request URL's origin.
     */
    OAUTH_ISSUER_URL?: string;

	OAUTH_PROVIDER?: OAuthHelpers; // Add this line

	/**
	 * The base URL of the MCP Worker (for iframe source).
	 */
	MCP_WORKER_URL: string;

	// Add any other bindings or variables defined in wrangler.toml
}
